# import tkinter as tk
# from tkinter import ttk, filedialog
# import os
# from lexer import tokenize
# from my_parser import Parser
#
# class IDE(tk.Tk):
#     def __init__(self):
#         super().__init__()
#
#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ Tkinter
#         try:
#             self._setup_ui()
#         except Exception as e:
#             print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GUI: {e}")
#             raise
#
#     def _setup_ui(self):
#         self.title("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä printf")
#         self.geometry("800x600")
#
#         # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
#         main_frame = ttk.Frame(self)
#         main_frame.pack(fill=tk.BOTH, expand=True)
#
#         # –†–µ–¥–∞–∫—Ç–æ—Ä
#         self.editor = tk.Text(main_frame, wrap=tk.WORD, font=('Menlo', 12))
#         self.editor.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
#
#         # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
#         toolbar = ttk.Frame(main_frame)
#         ttk.Button(toolbar, text="–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", command=self.run_analysis).pack(side=tk.LEFT)
#         toolbar.pack(fill=tk.X, padx=10, pady=5)
#
#         # –ö–æ–Ω—Å–æ–ª—å
#         self.console = tk.Text(main_frame, height=8, state=tk.DISABLED, bg="#f0f0f0")
#         self.console.pack(fill=tk.X, padx=10, pady=5)
#
#         # –ú–µ–Ω—é
#         self._create_menu()
#
#     def _create_menu(self):
#         menubar = tk.Menu(self)
#
#         # –ú–µ–Ω—é –§–∞–π–ª
#         file_menu = tk.Menu(menubar, tearoff=0)
#         file_menu.add_command(label="–û—Ç–∫—Ä—ã—Ç—å", command=self.open_file)
#         file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_file)
#         menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
#
#         self.config(menu=menubar)
#
#     def run_analysis(self):
#         code = self.editor.get("1.0", tk.END)
#         tokens = [t for t in tokenize(code) if t.type not in ('WHITESPACE',)]
#
#         parser = Parser(tokens)
#         errors = parser.parse()
#
#         self.console.config(state=tk.NORMAL)
#         self.console.delete(1.0, tk.END)
#
#         if errors:
#             for error in errors:
#                 self.console.insert(tk.END, f"‚óè {error}\n")
#         else:
#             self.console.insert(tk.END, "‚úì –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞\n")
#
#         self.console.config(state=tk.DISABLED)
#
#     def open_file(self):
#         path = filedialog.askopenfilename(filetypes=[("C files", "*.c")])
#         if path:
#             with open(path, 'r') as f:
#                 self.editor.delete(1.0, tk.END)
#                 self.editor.insert(tk.END, f.read())
#
#     def save_file(self):
#         path = filedialog.asksaveasfilename(defaultextension=".c")
#         if path:
#             with open(path, 'w') as f:
#                 f.write(self.editor.get(1.0, tk.END))
#
# if __name__ == "__main__":
#     try:
#         app = IDE()
#         app.mainloop()
#     except tk.TclError as e:
#         print(f"Fatal GUI error: {e}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É Tkinter!")

import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import webbrowser
import os
import re
from lexer import tokenize, Token
from my_parser import Parser


class IDE(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Compiler v1.0")
        self.geometry("1000x700")
        self.is_modified = False
        self.current_file = None
        self.icons = {
            'new': '‚ñ†',
            'open': 'üìÇ',
            'save': 'üíæ',
            'start': '‚ñ∂',  # –ù–æ–≤–∞—è –∏–∫–æ–Ω–∫–∞
            'undo': '‚Ü©',
            'redo': '‚Ü™',
            'cut': '‚úÇ',
            'copy': '‚éò',
            'paste': 'üìã',
            'help': '‚ùì'
        }
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        self._setup_theme()
        self._setup_ui()
        self._bind_events()

    # ---------------------------
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    # ---------------------------

    def _setup_theme(self):
        self.style = ttk.Style()
        self.style.theme_use('clam')
        self.configure(bg='#2d2d2d')

        self.style.configure(
            'TButton',
            background='#3d3d3d',
            foreground='white',
            font=('Arial', 10)
        )

    def _setup_ui(self):
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self)
        main_frame.pack(fill=tk.BOTH, expand=True)

        # –ú–µ–Ω—é
        self._create_menu()

        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self._create_toolbar(main_frame)

        # –†–µ–¥–∞–∫—Ç–æ—Ä —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π —Å—Ç—Ä–æ–∫
        self._create_editor(main_frame)

        # –ö–æ–Ω—Å–æ–ª—å –æ—à–∏–±–æ–∫
        self._create_console(main_frame)

    def _create_menu(self):
        menubar = tk.Menu(self)

        # –ú–µ–Ω—é: –§–∞–π–ª
        file_menu = tk.Menu(menubar, tearoff=0)
        file_menu.add_command(label="–ù–æ–≤—ã–π", command=self.new_file, accelerator="Ctrl+N")
        file_menu.add_command(label="–û—Ç–∫—Ä—ã—Ç—å", command=self.open_file, accelerator="Ctrl+O")
        file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_file, accelerator="Ctrl+S")
        file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫...", command=self.save_as)
        file_menu.add_separator()
        file_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.on_close)
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)

        # –ú–µ–Ω—é: –ü—Ä–∞–≤–∫–∞
        edit_menu = tk.Menu(menubar, tearoff=0)
        edit_menu.add_command(label="–û—Ç–º–µ–Ω–∏—Ç—å", command=lambda: self.editor.edit_undo(), accelerator="Ctrl+Z")
        edit_menu.add_command(label="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", command=lambda: self.editor.edit_redo(), accelerator="Ctrl+Y")
        edit_menu.add_separator()
        edit_menu.add_command(label="–í—ã—Ä–µ–∑–∞—Ç—å", command=lambda: self.editor.event_generate("<<Cut>>"),
                              accelerator="Ctrl+X")
        edit_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=lambda: self.editor.event_generate("<<Copy>>"),
                              accelerator="Ctrl+C")
        edit_menu.add_command(label="–í—Å—Ç–∞–≤–∏—Ç—å", command=lambda: self.editor.event_generate("<<Paste>>"),
                              accelerator="Ctrl+V")
        menubar.add_cascade(label="–ü—Ä–∞–≤–∫–∞", menu=edit_menu)

        # –ú–µ–Ω—é: –¢–µ–∫—Å—Ç
        text_menu = self._create_docs_menu(menubar)
        menubar.add_cascade(label="–¢–µ–∫—Å—Ç", menu=text_menu)

        # –ú–µ–Ω—é: –°–ø—Ä–∞–≤–∫–∞
        help_menu = tk.Menu(menubar, tearoff=0)
        help_menu.add_command(label="–°–ø—Ä–∞–≤–∫–∞", command=self.show_help)
        help_menu.add_command(label="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", command=self.show_about)
        menubar.add_cascade(label="–°–ø—Ä–∞–≤–∫–∞", menu=help_menu)

        self.config(menu=menubar)

    def _create_docs_menu(self, parent):
        text_menu = tk.Menu(parent, tearoff=0)
        docs = [
            ("–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏", "ProblemStatement.html"),
            ("–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞", "Grammar.html"),
            ("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏", "GrammarClassification.html"),
            ("–ú–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞", "MethodOfAnalysis.html"),
            ("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫", "NeutralizingErrors.html"),
            ("–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä", "TestCase.html"),
            ("–°–ø–∏—Å–æ–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã", "ListOfLiterature.html"),
            ("–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥", "About.html")
        ]
        for label, filename in docs:
            text_menu.add_command(
                label=label,
                command=lambda f=filename: self.open_doc(f)
            )
        return text_menu

    def _create_toolbar(self, parent):
        toolbar = ttk.Frame(parent)
        buttons = [
            ('new', self.icons['new'] + ' –ù–æ–≤—ã–π', self.new_file),
            ('open', self.icons['open'] + ' –û—Ç–∫—Ä—ã—Ç—å', self.open_file),
            ('save', self.icons['save'] + ' –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', self.save_file),
            ('start', self.icons['start'] + ' –ü—É—Å–∫', self.run_analysis),
            ('undo', self.icons['undo'] + ' –û—Ç–º–µ–Ω–∏—Ç—å', lambda: self.editor.edit_undo()),
            ('redo', self.icons['redo'] + ' –ü–æ–≤—Ç–æ—Ä–∏—Ç—å', lambda: self.editor.edit_redo()),
            ('cut', self.icons['cut'] + ' –í—ã—Ä–µ–∑–∞—Ç—å', lambda: self.editor.event_generate("<<Cut>>")),
            ('copy', self.icons['copy'] + ' –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å', lambda: self.editor.event_generate("<<Copy>>")),
            ('paste', self.icons['paste'] + ' –í—Å—Ç–∞–≤–∏—Ç—å', lambda: self.editor.event_generate("<<Paste>>")),
            ('help', self.icons['help'] + ' –°–ø—Ä–∞–≤–∫–∞', self.show_help)
        ]

        for icon, text, cmd in buttons:
            btn = ttk.Button(
                toolbar,
                text=text,
                command=cmd,
                style='TButton'
            )
            btn.pack(side=tk.LEFT, padx=2)

        toolbar.pack(fill=tk.X, padx=5, pady=5)

    def _create_editor(self, parent):
        editor_frame = ttk.Frame(parent)

        # –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫
        self.line_numbers = tk.Text(
            editor_frame,
            width=4,
            padx=5,
            state='disabled',
            bg='#1e1e1e',
            fg='#858585',
            font=('Menlo', 12)
        )
        self.line_numbers.pack(side=tk.LEFT, fill=tk.Y)

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–¥–∞–∫—Ç–æ—Ä
        self.editor = tk.Text(
            editor_frame,
            wrap=tk.NONE,
            font=('Menlo', 12),
            undo=True,
            bg='#1e1e1e',
            fg='white',
            insertbackground='white'
        )
        self.editor.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        # –ü—Ä–∏–≤—è–∑–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scroll = ttk.Scrollbar(editor_frame, command=self._sync_scroll)
        scroll.pack(side=tk.RIGHT, fill=tk.Y)
        self.editor.config(yscrollcommand=self._update_scroll)

        editor_frame.pack(fill=tk.BOTH, expand=True)

    def _create_console(self, parent):
        self.console = tk.Text(
            parent,
            height=8,
            state='disabled',
            bg='#1e1e1e',
            fg='#e06c75',
            font=('Menlo', 10)
        )
        self.console.pack(fill=tk.BOTH, padx=5, pady=5)
        self.console.bind("<Double-Button-1>", self._jump_to_error)

    # ---------------------------
    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    # ---------------------------

    def run_analysis(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞"""
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—à–∏–±–æ–∫
        self.editor.tag_remove("error", "1.0", tk.END)
        code = self.editor.get("1.0", tk.END)

        # –õ–µ–∫—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        tokens = tokenize(code)
        lex_errors = [t for t in tokens if t.type == 'ERROR']

        # –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        parser = Parser(tokens)
        syntax_errors = parser.parse()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        self._process_errors(lex_errors + syntax_errors)

    def _process_errors(self, errors):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫"""
        self.console.config(state=tk.NORMAL)
        self.console.delete("1.0", tk.END)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        self.editor.tag_config(
            "error",
            background="#4b1f1f",
            underline=True,
            underlinefg="#ff5555"
        )

        for error in errors:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–µ–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
            if isinstance(error, Token):
                line, col = error.position
                msg = f"–õ–µ–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: '{error.value}'"
                length = len(error.value)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
            else:
                line, col = self._parse_error_position(error)
                msg = error
                length = 1

            # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
            start = f"{line}.{col - 1}"
            end = f"{line}.{col + length - 1}"
            self.editor.tag_add("error", start, end)

            # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
            self.console.insert(tk.END, f"‚óè –°—Ç—Ä–æ–∫–∞ {line}: {msg}\n")

        if not errors:
            self.console.insert(tk.END, "‚úì –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞\n")

        self.console.config(state=tk.DISABLED)

    def _parse_error_position(self, error_msg):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        match = re.search(r'–°—Ç—Ä–æ–∫–∞ (\d+):(\d+)', error_msg)
        if match:
            return int(match.group(1)), int(match.group(2))
        return 1, 1

    def _jump_to_error(self, event):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—à–∏–±–∫–µ –ø–æ –¥–≤–æ–π–Ω–æ–º—É –∫–ª–∏–∫—É"""
        line = self.console.index(f"@{event.x},{event.y} linestart")
        error_text = self.console.get(line, f"{line} lineend")

        match = re.search(r'–°—Ç—Ä–æ–∫–∞ (\d+)', error_text)
        if match:
            line_num = match.group(1)
            self.editor.mark_set("insert", f"{line_num}.0")
            self.editor.see(f"{line_num}.0")

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (new_file, open_file –∏ —Ç.–¥.) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    # ...

    def _bind_events(self):
        self.editor.bind('<<Modified>>', self._on_text_modified)
        self.editor.bind('<KeyRelease>', self._update_line_numbers)
        self.protocol("WM_DELETE_WINDOW", self.on_close)

    def _on_text_modified(self, event):
        self.is_modified = True
        self.editor.edit_modified(False)

    def _update_line_numbers(self, event=None):
        lines = self.editor.get('1.0', 'end-1c').split('\n')
        self.line_numbers.config(state='normal')
        self.line_numbers.delete('1.0', 'end')
        for i, _ in enumerate(lines, 1):
            self.line_numbers.insert('end', f'{i}\n')
        self.line_numbers.config(state='disabled')

    def _sync_scroll(self, *args):
        self.editor.yview(*args)
        self.line_numbers.yview(*args)

    def _update_scroll(self, first, last):
        self.line_numbers.yview_moveto(first)
        self.editor.yview_moveto(first)

    def new_file(self):
        if self.is_modified:
            if not self._ask_save_changes():
                return
        self.editor.delete('1.0', 'end')
        self.is_modified = False

    def open_file(self):
        path = filedialog.askopenfilename(filetypes=[("C files", "*.c")])
        if path:
            with open(path, 'r') as f:
                self.editor.delete('1.0', 'end')
                self.editor.insert('1.0', f.read())
            self.is_modified = False

    def save_file(self):
        if not hasattr(self, 'current_file') or not self.current_file:
            self.save_as()
        else:
            self._save_to_file(self.current_file)

    def save_as(self):
        path = filedialog.asksaveasfilename(defaultextension=".c")
        if path:
            self._save_to_file(path)
            self.current_file = path

    def _save_to_file(self, path):
        with open(path, 'w') as f:
            f.write(self.editor.get('1.0', 'end'))
        self.is_modified = False

    def on_close(self):
        if self.is_modified:
            choice = messagebox.askyesnocancel(
                "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ",
                "–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º?"
            )
            if choice is None:  # –û—Ç–º–µ–Ω–∞
                return
            if choice:  # –î–∞
                self.save_file()
        self.destroy()

    def open_doc(self, filename):
        doc_path = os.path.join('docs', filename)
        if os.path.exists(doc_path):
            webbrowser.open(f'file://{os.path.abspath(doc_path)}')
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    def show_about(self):
        about_text = (
            "Compiler - —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è —è–∑—ã–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞\n\n"
            "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: Compiler\n"
            "–í–µ—Ä—Å–∏—è: 1.0\n"
            "–ê–≤—Ç–æ—Ä: –ú–∞—Ö–∞–ª–∏–Ω–∞ –ë.–ê.\n"
            "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 10.03.2025"
        )
        messagebox.showinfo("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", about_text)

    def show_help(self):
        self.open_doc('help.html')

    def _ask_save_changes(self):
        return messagebox.askyesno(
            "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ",
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º —Ñ–∞–π–ª–µ?"
        )


if __name__ == "__main__":
    app = IDE()
    app.mainloop()


